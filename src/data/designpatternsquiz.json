{
    "id": 1,
    "name": "Design Patterns",
    "description": "Design Patterns, This Includes Solid Principles of Design Patterns",
    "questions": [
        {
            "id": 1010,
            "name": "In SOLID principle,o stands for: ",
            "questionTypeId": 1,
            "options": [
                {
                    "id": 1055,
                    "questionId": 1010,
                    "name": "Objects and Variables",
                    "isAnswer": false
                },
                {
                    "id": 1056,
                    "questionId": 1010,
                    "name": "Open-Closed Principle",
                    "isAnswer": true
                },
                {
                    "id": 1057,
                    "questionId": 1010,
                    "name": "Object Oriented Programming",
                    "isAnswer": false
                },
                {
                    "id": 1058,
                    "questionId": 1010,
                    "name": "OutOfMemory Exception",
                    "isAnswer": false
                }
            ],
            "questionType": {
                "id": 1,
                "name": "Multiple Choice",
                "isActive": true
            }
        }, 
        {
            "id": 1011,
            "name": "Which patterb defines an interface for creating an object, but let the subclasses decide which class to instatiate. It let the instantiation differ to subclasses. ",
            "questionTypeId": 1,
            "options": [
                {
                    "id": 1055,
                    "questionId": 1010,
                    "name": "Factory Method",
                    "isAnswer": true
                },
                {
                    "id": 1056,
                    "questionId": 1010,
                    "name": "Builder",
                    "isAnswer": false
                },
                {
                    "id": 1057,
                    "questionId": 1010,
                    "name": "Abstract Factory",
                    "isAnswer": true
                },
                {
                    "id": 1058,
                    "questionId": 1010,
                    "name": "Prototype",
                    "isAnswer": false
                }
            ],
            "questionType": {
                "id": 1,
                "name": "Multiple Choice",
                "isActive" : true
            }
        },
        {
            "id" : 1012,
            "name": "Which pattern attach the additional responsibilties to an object dynamically. It provides a flexible aternative to subclassing for extending functionaliy. ",
            "options": [
                {
                    "id": 1055,
                    "questionId": 1010,
                    "name": "Chain of responsibilty",
                    "isAnswer": false
                },
                {
                    "id": 1056,
                    "questionId": 1010,
                    "name": "Decorator",
                    "isAnswer": true
                },
                {
                    "id": 1057,
                    "questionId": 1010,
                    "name": "Adapter",
                    "isAnswer": false
                },
                {
                    "id": 1058,
                    "questionId": 1010,
                    "name": "Composite",
                    "isAnswer": false
                }
            ], 
            "questionType": {
                "id": 1,
                "name": "Multiple Choice",
                "isActive": true
            }
        },
        {
            "id": 1013,
            "name": "Singleton pattern is a (accoring to a Gang of Four): ",
            "questionTypeId": 1,
            "options": [
                {
                    "id": 1055,
                    "questionId": 1010,
                    "name": "Creational Pattern",
                    "isAnswer": true
                },
                {
                    "id": 1056,
                    "questionId": 1010,
                    "name": "Structural Pattern",
                    "isAnswer": false
                },
                {
                    "id": 1057,
                    "questionId": 1010,
                    "name": "Nehavirol Pattern",
                    "isAnswer": false
                },
                {
                    "id": 1058,
                    "questionId": 1010,
                    "name": "None of the above",
                    "isAnswer": false
                }
            ],
            "questionType": {
                "id": 1,
                "name": "Multiple Choice",
                "isActive": true
            }
        }, 
        {
            "id": 1014,
            "name": "MVC, MVC & MVVP are related to which layer of software architecture ", 
            "options": [
                {
                    "id": 1055,
                    "questionId": 1010,
                    "name": "Data Access Layer",
                    "isAnswer": false
                },
                {
                    "id": 1056,
                    "questionId": 1010,
                    "name": "Third Party Library",
                    "isAnswer": false
                },
                {
                    "id": 1057,
                    "questionId": 1010,
                    "name": "Business/Service Layer",
                    "isAnswer": false
                },
                {
                    "id": 1058,
                    "questionId": 1010,
                    "name": "User Interface",
                    "isAnswer": true
                }
            ],
            "questionType":{
                "id": 1,
                "name": "Multiple Choice",
                "isActive":true
            }
        },
        {
            "id": 1015,
            "name": "Which Patter defines a family of algorithms, encapsulate each one, and make them interchangable. It lets the algorithm vary independently from clients that use it? ", 
            "questionTypeId": 1,
            "options": [
                {
                    "id": 1055,
                    "questionId": 1010, 
                    "name": "Template Method",
                    "isAnswer": false
                },
                {
                    "id": 1056,
                    "questionId": 1010,
                    "name": "Strategy",
                    "isAnswer": true
                },
                {
                    "id": 1057,
                    "questionId": 1010,
                    "name": "Decorator",
                    "isAnswer": false
                },
                {
                    "id": 1058,
                    "questionId": 1010,
                    "name": "Visitor",
                    "isAnswer": false
                }
            ],
            "questionType": {
                "id": 1,
                "name": "Multiple Choice",
                "isActive": true
            }
        },
        {
            "id": 1016,
            "name": "Which pattern defines one to many depency between ovjects so that when one object changes state, then all its dependents are notified and ipdated automatically? ", 
            "questionTypeId": 1,
            "options":[
                {
                    "id": 1055,
                    "questionId": 1010,
                    "name": "Chain of responsibility",
                    "isAnswer": false
                },
                {
                    "id": 1056,
                    "questionId": 1010,
                    "name": "Observer Pattern",
                    "isAnswer": true
                },
                {
                    "id": 1057,
                    "questionId": 1010,
                    "name": "Event Notification",
                    "isAnswer": false
                },
                {
                    "id": 1058,
                    "questionId": 1010,
                    "name": "Deligate Pattern",
                    "isAnswer": false
                }
            ],
            "questionType": {
                "id": 1,
                "name": "Multiple Choice",
                "isActive": true
            }
        },
        {
            "id": 1017,
            "name": "Which pattern ensures a class has only one instance and provides a global access point to it?", 
            "questionTypeId": 1,
            "options":[
                {
                    "id": 1055,
                    "questionId": 1010,
                    "name": "Single Class Factory",
                    "isAnswer": false
                },
                {
                    "id": 1056,
                    "questionId": 1010,
                    "name": "Singleton",
                    "isAnswer": true
                },
                {
                    "id": 1057,
                    "questionId": 1010,
                    "name": "Proxy",
                    "isAnswer": false
                },
                {
                    "id": 1058,
                    "questionId": 1010,
                    "name": "Flyweight",
                    "isAnswer": false
                }
            ], 
            "questionType": {
                "id":1,
                "name": "Multiple Choice",
                "isActive": true
            }
        }, 
        {
            "id": 1018,
            "name": "Which patter provides a way to acess the elements of an aggregate object wothout exposing its underlying representation? ", 
            "questionTypeId":1,
            "options":[
                {
                    "id": 1055,
                    "questionId": 1010,
                    "name": "Iterator",
                    "isAnswer": true
                },
                {
                    "id": 1056,
                    "questionId": 1010,
                    "name": "Composite",
                    "isAnswer": false
                },
                {
                    "id": 1057,
                    "questionId": 1010,
                    "name": "Visitor",
                    "isAnswer": false
                },
                {
                    "id": 1058,
                    "questionId": 1010,
                    "name": "Command",
                    "isAnswer": false
                }
            ],
            "questionType":{
             "id":1,
             "name": "Multiple Choice",
             "isActive":true
            }
        }, 
        {
            "id":1019,
            "name": "In SOLID principles 'S' stands for: ",
            "questionTypeId":1,
            "options":[
                {
                    "id": 1055,
                    "questionId": 1010,
                    "name": "Single Responsibility",
                    "isAnswer": true
                },
                {
                    "id": 1056,
                    "questionId": 1010,
                    "name": "Session",
                    "isAnswer": false
                },
                {
                    "id": 1057,
                    "questionId": 1010,
                    "name": "Strength",
                    "isAnswer": false
                },
                {
                    "id": 1058,
                    "questionId": 1010,
                    "name": "SqlServer",
                    "isAnswer": false
                }
            ], 
            "questionType": {
                "id": 1,
                "name": "Multiple Choice",
                "isActive": true
            }
        }
    ]
}